<!-- 多人会议 -->
<template>
	<view class="video" :style="{width: screenWidth + 'px', height: screenHeight + 'px'}">
		<swiper class="video__content" :indicator-dots="shuffingData.isShowDot" :indicator-color="shuffingData.dotColor"
			:indicator-active-color="shuffingData.dotActiveColor" :current="currentIndex" @change="swiperChange">
			<swiper-item>
				<!-- <view class="video__item" v-if="currentIndex === 0">
					<view class="other" :key="lastTracks.trackID" v-if="lastTracks && lastTracks.kind === 'video'">
						<QNRTC-UniPlugin-SurfaceView class="other-video" :local="1" :identifyID="lastTracks.identifyID"
							:userID="lastTracks.userID" :trackID="lastTracks.trackID">
						</QNRTC-UniPlugin-SurfaceView>
					</view>
					<template v-for="(item, index) in localTracks">
						<view class="mine" v-if="item.kind === 'video'" :key="item.trackID">
							<QNRTC-UniPlugin-SurfaceView class="mine-video" :local="0" :identifyID="item.identifyID"
								:trackID="item.trackID"></QNRTC-UniPlugin-SurfaceView>
						</view>
					</template>
				</view> -->
			</swiper-item>
			<swiper-item v-if="remoteTracks.length > 2">
				<view class="video__item more" v-if="currentIndex === 1">
					<template v-for="(item, index) in localTracks">
						<view class="others" :key="item.trackID" v-if="item.kind === 'video'">
							<QNRTC-UniPlugin-SurfaceView class="others-video" :local="0" :identifyID="item.identifyID"
								:trackID="item.trackID"></QNRTC-UniPlugin-SurfaceView>
							<view class="others-text">
								<text class="text">管理员图标</text>
								<text class="text">是否开启语音图标</text>
								<text class="text">用户昵称</text>
							</view>
						</view>
					</template>
					<template v-for="(item, index) in remoteTracks">
						<view class="others" :key="item.trackID" v-if="item.kind === 'video'" @click="selectShow(item)">
							<QNRTC-UniPlugin-SurfaceView class="others-video" :local="1" :identifyID="item.identifyID"
								:userID="item.userID" :trackID="item.trackID">
							</QNRTC-UniPlugin-SurfaceView>
							<view class="others-text">
								<text class="text">管理员图标</text>
								<text class="text">是否开启语音图标</text>
								<text class="text">用户昵称</text>
							</view>
						</view>
					</template>
				</view>
			</swiper-item>
			<swiper-item>
				<view class="video__item">其他视频2</view>
			</swiper-item>
		</swiper>
		<view class="video__btn">
			<text class="text" @click="operationCamera">点击{{isOpenCamera ? '关闭' : '打开'}}摄像头</text>
			<text class="text" @click="operationRethrust">开始转推</text>
			<text class="text" @click="handleEnd">停止推流</text>
			<text class="text" @click="setMutedLocalAudio">{{localAudioOn ? '关闭' : '开启'}}音频静音</text>
		</view>
	</view>
</template>

<script>
	import QNRTC, {
		QNRTCLogLevel
	} from "@/js_sdk/QNRTC-UniPlugin-JS/QNRTC-UniPlugin-JS/RTCIndex.native.js"
	import {
		mapState
	} from "vuex"
	export default {
		data() {
			return {
				shuffingData: {
					isShowDot: true, // 是否显示面板指示点
					dotColor: 'rgba(0, 0, 0, .3)', // 指示点颜色
					dotActiveColor: 'rgba(0, 0, 0, .8)', // 当前选中的指示点颜色
				},
				client: null, // 创建
				localTracks: [], // 本地
				remoteTracks: [], // 远程用户
				transcodingTracks: [], // 合流数组
				lastTracks: null, // 最后一个进入或者是指定展示的视频
				connectionState: "", // 连接状态
				cameraVideoTrack: null, // 创建摄像头
				microphoneAudioTrack: null, // 创建音频
				remoteVideoTracks: null, // 远程视频
				remoteAudioTracks: null, // 远程音频
				currentIndex: 0, // 当前在第几个滑块
				isOpenCamera: true, // 是否开启摄像头
				localAudioOn: false // 音频是否静音
			}
		},
		computed: {
			...mapState(["screenWidth", "screenHeight", "captureHeight", "captureWidth", "encodeWidth", "encodeHeight",
				"platform", "multiStreamEnable",
				"token", "policy", "logLevel", "stereo", "bwePolicy", "allowAudioMixWithOthers", "hWCodecEnabled",
				"maintainResolution", "fieldTrials", "encoderQualityMode", "isAEC3Enabled", "multiStreamEnable",
				"roomID", "pixelRatio"
			]),
			remoteTracks() {
				return this.lastTracks = this.remoteTracks && this.remoteTracks[this.remoteTracks.length - 1]
			}
		},
		watch: {
			remoteTracks() {
				return this.lastTracks = this.remoteTracks && this.remoteTracks[this.remoteTracks.length - 1]
			}
		},
		onBackPress() {
			this.client.leave()
			QNRTC.deinit()
		},
		onUnload() {
			this.client.leave()
			QNRTC.deinit()
			this.timer = null
		},
		onLoad() {
			this.handleJoinRoom()
			// setInterval(() => {
			// 	if (this.remoteAudioTracks) {
			// 		// 是否订阅
			// 		// const remoteAudioTracksSubscribed = this.remoteAudioTracks.isSubscribed()
			// 		// console.log("remoteAudioTracksSubscribed", remoteAudioTracksSubscribed)
			// 		// 获取音量
			// 		// const getRemoteVolume = this.remoteAudioTracks.getRemoteVolume()
			// 		// console.log("getRemoteVolume", getRemoteVolume, '啥考家等哈三点')
			// 	}
			// 	if (this.remoteVideoTracks) {
			// 		// 是否订阅
			// 		// const remoteVideoTracksSubscribed = this.remoteVideoTracks.isSubscribed()
			// 		// console.log("remoteVideoTracksSubscribed", remoteVideoTracksSubscribed)
			// 		// 获取当前 track 是否开启了大小流发布
			// 		// const isMultiProfileEnabled = this.remoteVideoTracks.isMultiProfileEnabled()
			// 		// console.log("isMultiProfileEnabled", isMultiProfileEnabled)
			// 		// 获取当前视频轨道的分辨率等级
			// 		// const getProfile = this.remoteVideoTracks.getProfile()
			// 		// console.log("getProfiles", getProfile)
			// 	}
			// }, 2000)

		},
		methods: {
			async handleJoinRoom() {
				if (this.connectionState === "CONNECTED") {
					uni.showModal({
						content: "已经加入房间"
					})
					return false
				}
				// 初始化SDK
				QNRTC.configRTC({
					policy: this.policy, // 媒体流的连接方式
					logLevel: this.logLevel, // 日志等级
					stereo: this.stereo === 1, // 是否使用立体声
					bwePolicy: this.bwePolicy, // 带宽评估策略只支持ios
					allowAudioMixWithOthers: this.allowAudioMixWithOthers === 1, // 是否允许和其它音频一起播放只支持ios
					hWCodecEnabled: this.hWCodecEnabled === 1, // 是否开启硬编只支持安卓
					maintainResolution: this.maintainResolution === 1, // 是否固定分辨率
					fieldTrials: this.fieldTrials, // 扩展配置只支持安卓
					encoderQualityMode: this.encoderQualityMode === 1, // 是否开启质量模式只支持安卓
					isAEC3Enabled: this.isAEC3Enabled === 1 // 获取当前是否已开启软件回声消除
				})
				this.client = QNRTC.createClient()
				// 是否自动订阅
				this.client.setAutoSubscribe(false)

				// 创建摄像头视频轨道
				this.cameraVideoTrack = QNRTC.createCameraVideoTrack({
					multiStreamEnable: this.multiStreamEnable === 1,
					width: this.encodeWidth * 1,
					height: this.encodeHeight * 1,
					captureHeight: this.captureHeight * 1,
					captureWidth: this.captureWidth * 1
				})
				this.cameraVideoTrack.setMuted(false)
				this.localTracks.push(this.cameraVideoTrack)
				// 创建麦克风音频轨道
				this.microphoneAudioTrack = QNRTC.createMicrophoneAudioTrack()
				this.localTracks.push(this.microphoneAudioTrack)
				//	房间状态改变
				this.client.on("onConnectionStateChanged", ({
					state,
					info
				}) => {
					console.log(state, '加入的状态')
					if (state === "CONNECTED") { // 连接成功
						// 发布本地的音视频轨道
						this.client.publish(this.localTracks, (onPublished, error) => {
							if (onPublished) {
								uni.showModal({
									content: "发布成功"
								})
								this.localTracks.forEach(item => {
									this.transcodingTracks.push({
										x: (this.screenWidth * this.pixelRatio) - 200,
										y: 0,
										width: 200,
										height: 200,
										trackID: item.trackID, // 当前要操作的 Track 的 id
										renderMode: "ASPECT_FILL", // 图像的填充模式
										SEIEnabled: 0, // 是否在合流中添加视频 Track 的 SEI 内容，针对所有合流视频 Track，默认只能设置一路 SEI
										zOrder: 1 // 该 Track 在合流画面中的层次，0 为最底层。该属性仅对视频 Track 有效。
									})
								})

							} else {
								uni.showModal({
									content: error.message
								})
							}
						})
					} else if (state === "DISCONNECTED") { // 未连接
						if (info.reason === "KICKED_OUT") {
							uni.showModal({
								content: "被踢出房间",
								success: (res) => {
									uni.navigateBack()
								}
							})
						} else if (info.reason === "ROOM_CLOSED") { // 房间被关
							uni.showModal({
								content: "房间被关闭",
								success: (res) => {
									uni.navigateBack()
								}
							})
						} else if (info.reason === "ROOM_FULL") { // 房间人数已满
							uni.showModal({
								content: "房间人数已满",
								success: (res) => {
									uni.navigateBack()
								}
							})
						}
					} else if (state === "RECONNECTING") { // 重连中
						uni.showLoading({
							mask: true,
							title: '重连中'
						})
					} else if (state === "RECONNECTED") { // 已重连
						uni.hideLoading()
						uni.showModal({
							content: "重连成功"
						})
					}
				})
				// 订阅 audio Track 成功
				this.client.on("onAudioSubscribed", params => {
					console.log("用户音频订阅成功")
					for (let i of params.trackList) {
						this.remoteTracks.push(i)

						this.remoteAudioTracks = i

						// 静默状态改变时回调
						this.remoteAudioTracks.on("onMuteStateChanged", params => {
							let content = ""
							if (params && params.isMuted) {
								content = `${this.remoteAudioTracks.trackID}被mute了`
							} else {
								content = `${this.remoteAudioTracks.trackID}取消mute了`
							}
							uni.showModal({
								content: content
							})
						})
					}


				})
				// 订阅 video Track 成功
				this.client.on("onVideoSubscribed", params => {
					console.log("用户视频订阅成功")
					for (let i of params.trackList) {
						this.remoteTracks.push(i)

						this.remoteVideoTracks = i
						// 视频质量改变回调
						this.remoteVideoTracks.on("onVideoProfileChanged", params => {
							if (params.profile) {
								uni.showModal({
									content: `当前的视频质量等级为：${params.profile}`
								})
							}
						})
						this.remoteVideoTracks.on("onRemoteVideoFrame", params => {
							console.log(params, "111111111111111111")
						})
						this.remoteVideoTracks.on("onMuteStateChanged", params => {
							let content = ""
							if (params && params.isMuted) {
								content = `${this.remoteVideoTracks.trackID}被mute了`
							} else {
								content = `${this.remoteVideoTracks.trackID}取消mute了`
							}
							uni.showModal({
								content: content
							})
						})
					}
				})
				// 远端 Track 发布
				this.client.on("onUserPublished", params => {
					console.log("用户发布", params)
					// todo 不知道是否可以获取到最后一个
					// if (this.client.getPublishedTracks().length > 0) { // 最后一个
					// 	console.log('最后一个的值', this.client.getPublishedTracks())
					// }

					// 多个人的时候需要实时修改x轴和y轴
					// params.trackList.forEach(item => {
					// 	this.transcodingTracks.push({
					// 		x: this.transcodingTracks.length * 130,
					// 		y: this.transcodingTracks.length * 130,
					// 		width: 100,
					// 		height: 100,
					// 		trackID: item.trackID, // 当前要操作的 Track 的 id
					// 		renderMode: "ASPECT_FILL", // 图像的填充模式
					// 		SEIEnabled: 0, // 是否在合流中添加视频 Track 的 SEI 内容，针对所有合流视频 Track，默认只能设置一路 SEI
					// 		zOrder: 0 // 该 Track 在合流画面中的层次，0 为最底层。该属性仅对视频 Track 有效。
					// 	})
					// })

					// 一对一的设置
					params.trackList.forEach(item => {
						this.transcodingTracks.push({
							x: 0,
							y: 0,
							width: this.screenWidth * this.pixelRatio,
							height: this.screenHeight * this.pixelRatio,
							trackID: item.trackID, // 当前要操作的 Track 的 id
							renderMode: "ASPECT_FILL", // 图像的填充模式
							SEIEnabled: 0, // 是否在合流中添加视频 Track 的 SEI 内容，针对所有合流视频 Track，默认只能设置一路 SEI
							zOrder: 0 // 该 Track 在合流画面中的层次，0 为最底层。该属性仅对视频 Track 有效。
						})
					})
				})
				// 远端 Track 取消发布
				this.client.on("onUserUnpublished", params => {
					console.log("用户取消发布", params)
					for (let i of params.trackList) {
						const index = this.remoteTracks.findIndex(item => item.trackID === i.trackID)
						if (index >= 0) {
							this.remoteTracks.splice(index, 1)
						}

						if (this.remoteAudioTracks && i.trackID === this.remoteAudioTracks.trackID) {
							this.remoteAudioTracks = null
						}
						if (this.remoteVideoTracks && i.trackID === this.remoteVideoTracks.trackID) {
							this.remoteVideoTracks = null
						}

						if (this.transcodingTracks.length > 0) {
							// todo 取消发布删除用户合流
							this.transcodingTracks.forEach((item, index) => {
								if (item.trackID === i.trackID) {
									this.transcodingTracks.splice(index, 1)
								}
							})
							// todo 需要修改合流布局的配置
							this.client.setTranscodingLiveStreamingTracks('yyds01', this.transcodingTracks)
						}
					}
				})
				// 收到自定义消息
				this.client.on("onMessageReceived", params => {
					console.log("接收到消息", params)
					uni.showModal({
						content: `${params.userId}说：${params.content}`
					})
				})
				// 远端用户进入重连
				this.client.on("onUserReconnecting", params => {
					console.log("用户重连中", params)
				})
				// 远端用户重连成功
				this.client.on("onUserReconnected", params => {
					console.log("用户重连成功", params)
				})
				// 远端用户离开房间
				this.client.on("onUserLeft", params => {
					console.log("用户离开房间", params)
				})

				// 合流布局更改回调
				this.client.on("onUpdatedLiveStreaming", params => {
					console.log(params, '布局发生了改变')
					uni.showModal({
						content: `转推任务${params.streamID}布局已更改`
					})
				})
				// 转推任务成功创建时触发此回调
				this.client.on("onStartLiveStreaming", params => {
					console.log(params, '推流成功', this.transcodingTracks)
					uni.showModal({
						content: `转推任务${params.streamID}创建成功`
					})
					// 进行合流布局的配置
					this.client.setTranscodingLiveStreamingTracks('yyds01', this.transcodingTracks)
				})
				// 转推任务成功停止时触发此回调
				this.client.on("onStoppedLiveStreaming", params => {
					uni.showModal({
						content: `转推任务${params.streamID}已停止`
					})
				})
				// 转推任务出错时触发此回调
				this.client.on("onErrorLiveStreaming", params => {
					uni.showModal({
						content: `转推任务${params.streamID}${params.info.message}`
					})
					console.log(params, '转推任务失败')
				})
				this.client.join(this.token)
			},
			// 轮播发生改变
			swiperChange(event) {
				this.currentIndex = event.detail.current
			},
			/**
			 * 开启或关闭摄像头
			 */
			operationCamera() {
				if (this.isOpenCamera) { // 关闭摄像头
					this.cameraVideoTrack && this.cameraVideoTrack.stopCapture()
					this.isOpenCamera = false
					return
				}
				this.cameraVideoTrack && this.cameraVideoTrack.startCapture()
				this.isOpenCamera = true
			},
			/**
			 * 选择第一页的大屏幕展示
			 * @param item {Object} 对应的数据
			 */
			selectShow(item) {
				this.lastTracks = item
				this.currentIndex = 0
			},
			/**
			 * 开始转推
			 */
			operationRethrust() {
				// 开始转推
				this.client.startLiveStreamingWithTranscoding({
					streamID: "yyds01", // 自定义合流ID, 该id为合流任务的唯一标识符
					url: "rtmp://pili-publish.hskvideotest.smsqmx.com/lianmai-01/yyds01", // 设置合流任务的推流地址
					width: this.screenWidth * this.pixelRatio, // 设置合流画布的宽度
					height: this.screenHeight * this.pixelRatio, // 设置合流画布的高度
					videoFrameRate: 24, // 设置合流任务的视频帧率
					bitrate: 1024, // 设置合流任务的码率，单位: kbps
					minBitrate: 200, // 最小码率
					maxBitrate: 2024, // 最大码率
					renderMode: 'ASPECT_FILL', // 设置合流任务的默认画面填充方式
					holdLastFrame: true, // 是否在 Track 没有数据的情况下在合流画布中保持最后一帧
					background: {
						width: this.screenWidth * this.pixelRatio,
						height: this.screenHeight * this.pixelRatio,
						x: 0,
						y: 0,
						url: "https://pili-playback.qnsdk.com/ivs_background_1280x720.png"
					}, // 背景
					watermarks: [{
						w: 100,
						h: 100,
						x: 1,
						y: this.screenHeight,
						url: "https://pili-playback.qnsdk.com/ivs_background_1280x720.png"
					}] // 水印
				})
			},
			// 停止合流 -- native接口
			handleEnd() {
				// todo 取消合流有问题
				// 取消某路合流布局
				// this.transcodingTracks.splice(this.transcodingTracks.length - 1, 1)
				// this.client.removeTranscodingLiveStreamingTracks('yyds01', this.transcodingTracks)
				// 取消推流
				this.client.stopLiveStreamingWithTranscoding({
					streamID: "yyds01", // 自定义合流ID, 该id为合流任务的唯一标识符
					url: "rtmp://pili-publish.hskvideotest.smsqmx.com/lianmai-01/yyds01", // 设置合流任务的推流地址
					width: this.screenWidth * this.pixelRatio, // 设置合流画布的宽度
					height: this.screenHeight * this.pixelRatio, // 设置合流画布的高度
					videoFrameRate: 24, // 设置合流任务的视频帧率
					bitrate: 1024, // 设置合流任务的码率，单位: kbps
					minBitrate: 200, // 最小码率
					maxBitrate: 2024, // 最大码率
					renderMode: 'ASPECT_FILL', // 设置合流任务的默认画面填充方式
					holdLastFrame: true, // 是否在 Track 没有数据的情况下在合流画布中保持最后一帧
				})
			},
			// 本地音频静音
			setMutedLocalAudio() {
				this.localAudioOn = !this.localAudioOn
				this.microphoneAudioTrack && this.microphoneAudioTrack.setMuted(this.localAudioOn)
				// this.microphoneAudioTrack.setVolume(10)
			}
		}
	}
</script>

<style lang="scss" scoped>
	.video {

		&__content {
			flex: 1;
			background-color: rgba(85, 170, 255, .6);
		}

		&__item {
			flex: 1;
			position: relative;

			&.more {
				flex-direction: row;
				flex-wrap: wrap;
			}

			.mine {
				flex: 1;

				&-video {
					flex: 1;
				}

				&.change {
					position: absolute;
					top: 0;
					right: 0;
					width: 300rpx;
					height: 400rpx;
				}
			}

			.other {
				flex: 1;

				&-video {
					flex: 1;
				}

				&.change {
					position: absolute;
					top: 0;
					right: 0;
					width: 300rpx;
					height: 400rpx;
				}
			}

			.others {
				position: relative;
				width: 300rpx;
				height: 300rpx;
				margin-bottom: 10rpx;

				&-video {
					flex: 1;
				}


				&-text {
					position: absolute;
					bottom: 0;
					left: 0;
					padding: 10rpx;
					align-items: center;
					flex-direction: row;

					.text {
						color: #fff;
						font-size: 16rpx;
					}
				}

				&-img {
					position: absolute;
					top: 50%;
					left: 50%;
					width: 60rpx;
					height: 60rpx;
				}
			}
		}

		&__btn {
			position: fixed;
			bottom: 0;
			flex-direction: column;
			align-items: center;
			justify-content: center;

			.text {
				width: 300rpx;
				height: 60rpx;
				font-size: 24rpx;
				text-align: center;
				line-height: 60rpx;
				margin-bottom: 30rpx;
				border-radius: 10rpx;
				background-color: #fff;

				&:active {
					background-color: darken(#fff, 5%);
				}
			}
		}
	}
</style>